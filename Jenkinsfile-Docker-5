// Declarative Pipeline
// https://github.com/darinpope/jenkins-example-docker/blob/main/Jenkinsfile-3
// https://github.com/jenkinsci/docker/issues/962
// .Net SDKs : https://hub.docker.com/_/microsoft-dotnet-sdk
// Pipeline Syntax: dockerfile options.
// https://www.jenkins.io/doc/book/pipeline/syntax/#common-options
// In this example each stage uses its won build image.
// However, the first stage the image is built on the fly and the source code to build is copied into it
// as part of the steps in teh Dockerfile.
pipeline {
  agent none
  stages {
    stage('Build the .Net assets for the back-end and the tools') {
      agent { dockerfile true } // build an image on the fly with the code to build backed into it!    
      steps {
        sh 'dotnet --version'
        sh 'dotnet build ConsoleApp1'
      }
    }
    stage('Build the Java assets for the back-end') {
      agent {
        docker { image 'maven:3.8.1-adoptopenjdk-11' }
      }
      steps {
        sh 'mvn --version'
      }
    }
    stage('Build the Front-end nodejs app') {
      agent {
        docker { image 'node:16-alpine' }
      }
      steps {
        sh 'node --version'
      }
    }
  }
}

// Using a single container for the whole pipeline: there is only a pipeline level docker image.
// pipeline {
//     agent { dockerfile true } // build an image on the fly with the code to build backe dinto it!    
//     stages {
//         stage('Build the .Net assets') {
//              steps {
//               sh 'dotnet --version'
//               sh 'dotnet build ConsoleApp1' // does this work?
//       }
//     }
//   }
// }